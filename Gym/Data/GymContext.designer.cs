#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Gym.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GymDb")]
	public partial class GymContextDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCost(Cost instance);
    partial void UpdateCost(Cost instance);
    partial void DeleteCost(Cost instance);
    partial void InsertCostCategory(CostCategory instance);
    partial void UpdateCostCategory(CostCategory instance);
    partial void DeleteCostCategory(CostCategory instance);
    partial void InsertCourseFacility(CourseFacility instance);
    partial void UpdateCourseFacility(CourseFacility instance);
    partial void DeleteCourseFacility(CourseFacility instance);
    partial void InsertGood(Good instance);
    partial void UpdateGood(Good instance);
    partial void DeleteGood(Good instance);
    partial void InsertPassage(Passage instance);
    partial void UpdatePassage(Passage instance);
    partial void DeletePassage(Passage instance);
    partial void InsertSetting(Setting instance);
    partial void UpdateSetting(Setting instance);
    partial void DeleteSetting(Setting instance);
    partial void InsertSport(Sport instance);
    partial void UpdateSport(Sport instance);
    partial void DeleteSport(Sport instance);
    partial void InsertSportMentor(SportMentor instance);
    partial void UpdateSportMentor(SportMentor instance);
    partial void DeleteSportMentor(SportMentor instance);
    partial void InsertClosetUsage(ClosetUsage instance);
    partial void UpdateClosetUsage(ClosetUsage instance);
    partial void DeleteClosetUsage(ClosetUsage instance);
    partial void InsertCloset(Closet instance);
    partial void UpdateCloset(Closet instance);
    partial void DeleteCloset(Closet instance);
    partial void InsertEnrollPayment(EnrollPayment instance);
    partial void UpdateEnrollPayment(EnrollPayment instance);
    partial void DeleteEnrollPayment(EnrollPayment instance);
    partial void InsertFacility(Facility instance);
    partial void UpdateFacility(Facility instance);
    partial void DeleteFacility(Facility instance);
    partial void InsertEnrollCourse(EnrollCourse instance);
    partial void UpdateEnrollCourse(EnrollCourse instance);
    partial void DeleteEnrollCourse(EnrollCourse instance);
    partial void InsertEnrollFacility(EnrollFacility instance);
    partial void UpdateEnrollFacility(EnrollFacility instance);
    partial void DeleteEnrollFacility(EnrollFacility instance);
    partial void InsertTransaction(Transaction instance);
    partial void UpdateTransaction(Transaction instance);
    partial void DeleteTransaction(Transaction instance);
    partial void InsertMember(Member instance);
    partial void UpdateMember(Member instance);
    partial void DeleteMember(Member instance);
    partial void InsertEnroll(Enroll instance);
    partial void UpdateEnroll(Enroll instance);
    partial void DeleteEnroll(Enroll instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertTrade(Trade instance);
    partial void UpdateTrade(Trade instance);
    partial void DeleteTrade(Trade instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    #endregion
		
		public GymContextDataContext() : 
				base(global::Gym.Properties.Settings.Default.GymDbConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public GymContextDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GymContextDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GymContextDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GymContextDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Cost> Costs
		{
			get
			{
				return this.GetTable<Cost>();
			}
		}
		
		public System.Data.Linq.Table<CostCategory> CostCategories
		{
			get
			{
				return this.GetTable<CostCategory>();
			}
		}
		
		public System.Data.Linq.Table<CourseFacility> CourseFacilities
		{
			get
			{
				return this.GetTable<CourseFacility>();
			}
		}
		
		public System.Data.Linq.Table<Good> Goods
		{
			get
			{
				return this.GetTable<Good>();
			}
		}
		
		public System.Data.Linq.Table<Passage> Passages
		{
			get
			{
				return this.GetTable<Passage>();
			}
		}
		
		public System.Data.Linq.Table<Setting> Settings
		{
			get
			{
				return this.GetTable<Setting>();
			}
		}
		
		public System.Data.Linq.Table<Sport> Sports
		{
			get
			{
				return this.GetTable<Sport>();
			}
		}
		
		public System.Data.Linq.Table<SportMentor> SportMentors
		{
			get
			{
				return this.GetTable<SportMentor>();
			}
		}
		
		public System.Data.Linq.Table<ClosetUsage> ClosetUsages
		{
			get
			{
				return this.GetTable<ClosetUsage>();
			}
		}
		
		public System.Data.Linq.Table<Closet> Closets
		{
			get
			{
				return this.GetTable<Closet>();
			}
		}
		
		public System.Data.Linq.Table<EnrollPayment> EnrollPayments
		{
			get
			{
				return this.GetTable<EnrollPayment>();
			}
		}
		
		public System.Data.Linq.Table<Facility> Facilities
		{
			get
			{
				return this.GetTable<Facility>();
			}
		}
		
		public System.Data.Linq.Table<EnrollCourse> EnrollCourses
		{
			get
			{
				return this.GetTable<EnrollCourse>();
			}
		}
		
		public System.Data.Linq.Table<EnrollFacility> EnrollFacilities
		{
			get
			{
				return this.GetTable<EnrollFacility>();
			}
		}
		
		public System.Data.Linq.Table<Transaction> Transactions
		{
			get
			{
				return this.GetTable<Transaction>();
			}
		}
		
		public System.Data.Linq.Table<Member> Members
		{
			get
			{
				return this.GetTable<Member>();
			}
		}
		
		public System.Data.Linq.Table<Enroll> Enrolls
		{
			get
			{
				return this.GetTable<Enroll>();
			}
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<Trade> Trades
		{
			get
			{
				return this.GetTable<Trade>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cost")]
	public partial class Cost : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Category;
		
		private EntitySet<Transaction> _Transactions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    #endregion
		
		public Cost()
		{
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cost_Transaction", Storage="_Transactions", ThisKey="Id", OtherKey="CostId")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Cost = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Cost = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CostCategory")]
	public partial class CostCategory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCategoryChanging(string value);
    partial void OnCategoryChanged();
    #endregion
		
		public CostCategory()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CourseFacility")]
	public partial class CourseFacility : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CourseId;
		
		private int _FacilityId;
		
		private EntityRef<Facility> _Facility;
		
		private EntityRef<Course> _Course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnFacilityIdChanging(int value);
    partial void OnFacilityIdChanged();
    #endregion
		
		public CourseFacility()
		{
			this._Facility = default(EntityRef<Facility>);
			this._Course = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacilityId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FacilityId
		{
			get
			{
				return this._FacilityId;
			}
			set
			{
				if ((this._FacilityId != value))
				{
					if (this._Facility.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFacilityIdChanging(value);
					this.SendPropertyChanging();
					this._FacilityId = value;
					this.SendPropertyChanged("FacilityId");
					this.OnFacilityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Facility_CourseFacility", Storage="_Facility", ThisKey="FacilityId", OtherKey="Id", IsForeignKey=true)]
		public Facility Facility
		{
			get
			{
				return this._Facility.Entity;
			}
			set
			{
				Facility previousValue = this._Facility.Entity;
				if (((previousValue != value) 
							|| (this._Facility.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Facility.Entity = null;
						previousValue.CourseFacilities.Remove(this);
					}
					this._Facility.Entity = value;
					if ((value != null))
					{
						value.CourseFacilities.Add(this);
						this._FacilityId = value.Id;
					}
					else
					{
						this._FacilityId = default(int);
					}
					this.SendPropertyChanged("Facility");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseFacility", Storage="_Course", ThisKey="CourseId", OtherKey="Id", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.CourseFacilities.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.CourseFacilities.Add(this);
						this._CourseId = value.Id;
					}
					else
					{
						this._CourseId = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Goods")]
	public partial class Good : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _Count;
		
		private int _OrderPoint;
		
		private EntitySet<Trade> _Trades;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCountChanging(int value);
    partial void OnCountChanged();
    partial void OnOrderPointChanging(int value);
    partial void OnOrderPointChanged();
    #endregion
		
		public Good()
		{
			this._Trades = new EntitySet<Trade>(new Action<Trade>(this.attach_Trades), new Action<Trade>(this.detach_Trades));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Count", DbType="Int NOT NULL")]
		public int Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderPoint", DbType="Int NOT NULL")]
		public int OrderPoint
		{
			get
			{
				return this._OrderPoint;
			}
			set
			{
				if ((this._OrderPoint != value))
				{
					this.OnOrderPointChanging(value);
					this.SendPropertyChanging();
					this._OrderPoint = value;
					this.SendPropertyChanged("OrderPoint");
					this.OnOrderPointChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Good_Trade", Storage="_Trades", ThisKey="Id", OtherKey="GoodId")]
		public EntitySet<Trade> Trades
		{
			get
			{
				return this._Trades;
			}
			set
			{
				this._Trades.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Trades(Trade entity)
		{
			this.SendPropertyChanging();
			entity.Good = this;
		}
		
		private void detach_Trades(Trade entity)
		{
			this.SendPropertyChanging();
			entity.Good = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Passage")]
	public partial class Passage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _MemberId;
		
		private System.DateTime _Time;
		
		private bool _IsEntrance;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMemberIdChanging(int value);
    partial void OnMemberIdChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    partial void OnIsEntranceChanging(bool value);
    partial void OnIsEntranceChanged();
    #endregion
		
		public Passage()
		{
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberId", DbType="Int NOT NULL")]
		public int MemberId
		{
			get
			{
				return this._MemberId;
			}
			set
			{
				if ((this._MemberId != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIdChanging(value);
					this.SendPropertyChanging();
					this._MemberId = value;
					this.SendPropertyChanged("MemberId");
					this.OnMemberIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsEntrance", DbType="Bit NOT NULL")]
		public bool IsEntrance
		{
			get
			{
				return this._IsEntrance;
			}
			set
			{
				if ((this._IsEntrance != value))
				{
					this.OnIsEntranceChanging(value);
					this.SendPropertyChanging();
					this._IsEntrance = value;
					this.SendPropertyChanged("IsEntrance");
					this.OnIsEntranceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Passage", Storage="_Member", ThisKey="MemberId", OtherKey="Id", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.Passages.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.Passages.Add(this);
						this._MemberId = value.Id;
					}
					else
					{
						this._MemberId = default(int);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Setting")]
	public partial class Setting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Key;
		
		private string _Value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public Setting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Key]", Storage="_Key", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sport")]
	public partial class Sport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<SportMentor> _SportMentors;
		
		private EntitySet<Course> _Courses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Sport()
		{
			this._SportMentors = new EntitySet<SportMentor>(new Action<SportMentor>(this.attach_SportMentors), new Action<SportMentor>(this.detach_SportMentors));
			this._Courses = new EntitySet<Course>(new Action<Course>(this.attach_Courses), new Action<Course>(this.detach_Courses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sport_SportMentor", Storage="_SportMentors", ThisKey="Id", OtherKey="SportId")]
		public EntitySet<SportMentor> SportMentors
		{
			get
			{
				return this._SportMentors;
			}
			set
			{
				this._SportMentors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sport_Course", Storage="_Courses", ThisKey="Id", OtherKey="SportId")]
		public EntitySet<Course> Courses
		{
			get
			{
				return this._Courses;
			}
			set
			{
				this._Courses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SportMentors(SportMentor entity)
		{
			this.SendPropertyChanging();
			entity.Sport = this;
		}
		
		private void detach_SportMentors(SportMentor entity)
		{
			this.SendPropertyChanging();
			entity.Sport = null;
		}
		
		private void attach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Sport = this;
		}
		
		private void detach_Courses(Course entity)
		{
			this.SendPropertyChanging();
			entity.Sport = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SportMentors")]
	public partial class SportMentor : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MentorId;
		
		private int _SportId;
		
		private int _Price;
		
		private EntityRef<Sport> _Sport;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMentorIdChanging(int value);
    partial void OnMentorIdChanged();
    partial void OnSportIdChanging(int value);
    partial void OnSportIdChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    #endregion
		
		public SportMentor()
		{
			this._Sport = default(EntityRef<Sport>);
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MentorId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MentorId
		{
			get
			{
				return this._MentorId;
			}
			set
			{
				if ((this._MentorId != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMentorIdChanging(value);
					this.SendPropertyChanging();
					this._MentorId = value;
					this.SendPropertyChanged("MentorId");
					this.OnMentorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SportId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SportId
		{
			get
			{
				return this._SportId;
			}
			set
			{
				if ((this._SportId != value))
				{
					if (this._Sport.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSportIdChanging(value);
					this.SendPropertyChanging();
					this._SportId = value;
					this.SendPropertyChanged("SportId");
					this.OnSportIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sport_SportMentor", Storage="_Sport", ThisKey="SportId", OtherKey="Id", IsForeignKey=true)]
		public Sport Sport
		{
			get
			{
				return this._Sport.Entity;
			}
			set
			{
				Sport previousValue = this._Sport.Entity;
				if (((previousValue != value) 
							|| (this._Sport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sport.Entity = null;
						previousValue.SportMentors.Remove(this);
					}
					this._Sport.Entity = value;
					if ((value != null))
					{
						value.SportMentors.Add(this);
						this._SportId = value.Id;
					}
					else
					{
						this._SportId = default(int);
					}
					this.SendPropertyChanged("Sport");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_SportMentor", Storage="_Member", ThisKey="MentorId", OtherKey="Id", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.SportMentors.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.SportMentors.Add(this);
						this._MentorId = value.Id;
					}
					else
					{
						this._MentorId = default(int);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClosetUsages")]
	public partial class ClosetUsage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClosetId;
		
		private int _MemberId;
		
		private System.DateTime _FromTime;
		
		private System.Nullable<System.DateTime> _ToTime;
		
		private int _Id;
		
		private EntityRef<Closet> _Closet;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClosetIdChanging(int value);
    partial void OnClosetIdChanged();
    partial void OnMemberIdChanging(int value);
    partial void OnMemberIdChanged();
    partial void OnFromTimeChanging(System.DateTime value);
    partial void OnFromTimeChanged();
    partial void OnToTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnToTimeChanged();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    #endregion
		
		public ClosetUsage()
		{
			this._Closet = default(EntityRef<Closet>);
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClosetId", DbType="Int NOT NULL")]
		public int ClosetId
		{
			get
			{
				return this._ClosetId;
			}
			set
			{
				if ((this._ClosetId != value))
				{
					if (this._Closet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClosetIdChanging(value);
					this.SendPropertyChanging();
					this._ClosetId = value;
					this.SendPropertyChanged("ClosetId");
					this.OnClosetIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberId", DbType="Int NOT NULL")]
		public int MemberId
		{
			get
			{
				return this._MemberId;
			}
			set
			{
				if ((this._MemberId != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIdChanging(value);
					this.SendPropertyChanging();
					this._MemberId = value;
					this.SendPropertyChanged("MemberId");
					this.OnMemberIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FromTime", DbType="DateTime NOT NULL")]
		public System.DateTime FromTime
		{
			get
			{
				return this._FromTime;
			}
			set
			{
				if ((this._FromTime != value))
				{
					this.OnFromTimeChanging(value);
					this.SendPropertyChanging();
					this._FromTime = value;
					this.SendPropertyChanged("FromTime");
					this.OnFromTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ToTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ToTime
		{
			get
			{
				return this._ToTime;
			}
			set
			{
				if ((this._ToTime != value))
				{
					this.OnToTimeChanging(value);
					this.SendPropertyChanging();
					this._ToTime = value;
					this.SendPropertyChanged("ToTime");
					this.OnToTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Closet_ClosetUsage", Storage="_Closet", ThisKey="ClosetId", OtherKey="Id", IsForeignKey=true)]
		public Closet Closet
		{
			get
			{
				return this._Closet.Entity;
			}
			set
			{
				Closet previousValue = this._Closet.Entity;
				if (((previousValue != value) 
							|| (this._Closet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Closet.Entity = null;
						previousValue.ClosetUsages.Remove(this);
					}
					this._Closet.Entity = value;
					if ((value != null))
					{
						value.ClosetUsages.Add(this);
						this._ClosetId = value.Id;
					}
					else
					{
						this._ClosetId = default(int);
					}
					this.SendPropertyChanged("Closet");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_ClosetUsage", Storage="_Member", ThisKey="MemberId", OtherKey="Id", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.ClosetUsages.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.ClosetUsages.Add(this);
						this._MemberId = value.Id;
					}
					else
					{
						this._MemberId = default(int);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Closets")]
	public partial class Closet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private bool _IsVip;
		
		private bool _IsBroken;
		
		private System.Nullable<int> _UserId;
		
		private bool _IsFree;
		
		private System.Nullable<int> _RentorId;
		
		private EntitySet<ClosetUsage> _ClosetUsages;
		
		private EntityRef<Member> _Member;
		
		private EntityRef<Member> _Member1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIsVipChanging(bool value);
    partial void OnIsVipChanged();
    partial void OnIsBrokenChanging(bool value);
    partial void OnIsBrokenChanged();
    partial void OnUserIdChanging(System.Nullable<int> value);
    partial void OnUserIdChanged();
    partial void OnIsFreeChanging(bool value);
    partial void OnIsFreeChanged();
    partial void OnRentorIdChanging(System.Nullable<int> value);
    partial void OnRentorIdChanged();
    #endregion
		
		public Closet()
		{
			this._ClosetUsages = new EntitySet<ClosetUsage>(new Action<ClosetUsage>(this.attach_ClosetUsages), new Action<ClosetUsage>(this.detach_ClosetUsages));
			this._Member = default(EntityRef<Member>);
			this._Member1 = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsVip", DbType="Bit NOT NULL")]
		public bool IsVip
		{
			get
			{
				return this._IsVip;
			}
			set
			{
				if ((this._IsVip != value))
				{
					this.OnIsVipChanging(value);
					this.SendPropertyChanging();
					this._IsVip = value;
					this.SendPropertyChanged("IsVip");
					this.OnIsVipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsBroken", DbType="Bit NOT NULL")]
		public bool IsBroken
		{
			get
			{
				return this._IsBroken;
			}
			set
			{
				if ((this._IsBroken != value))
				{
					this.OnIsBrokenChanging(value);
					this.SendPropertyChanging();
					this._IsBroken = value;
					this.SendPropertyChanged("IsBroken");
					this.OnIsBrokenChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int")]
		public System.Nullable<int> UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._Member1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFree", DbType="Bit NOT NULL")]
		public bool IsFree
		{
			get
			{
				return this._IsFree;
			}
			set
			{
				if ((this._IsFree != value))
				{
					this.OnIsFreeChanging(value);
					this.SendPropertyChanging();
					this._IsFree = value;
					this.SendPropertyChanged("IsFree");
					this.OnIsFreeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RentorId", DbType="Int")]
		public System.Nullable<int> RentorId
		{
			get
			{
				return this._RentorId;
			}
			set
			{
				if ((this._RentorId != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRentorIdChanging(value);
					this.SendPropertyChanging();
					this._RentorId = value;
					this.SendPropertyChanged("RentorId");
					this.OnRentorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Closet_ClosetUsage", Storage="_ClosetUsages", ThisKey="Id", OtherKey="ClosetId")]
		public EntitySet<ClosetUsage> ClosetUsages
		{
			get
			{
				return this._ClosetUsages;
			}
			set
			{
				this._ClosetUsages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Closet", Storage="_Member", ThisKey="RentorId", OtherKey="Id", IsForeignKey=true)]
		public Member Rentor
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.Closets.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.Closets.Add(this);
						this._RentorId = value.Id;
					}
					else
					{
						this._RentorId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Rentor");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Closet1", Storage="_Member1", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public Member User
		{
			get
			{
				return this._Member1.Entity;
			}
			set
			{
				Member previousValue = this._Member1.Entity;
				if (((previousValue != value) 
							|| (this._Member1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member1.Entity = null;
						previousValue.Closets1.Remove(this);
					}
					this._Member1.Entity = value;
					if ((value != null))
					{
						value.Closets1.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(Nullable<int>);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ClosetUsages(ClosetUsage entity)
		{
			this.SendPropertyChanging();
			entity.Closet = this;
		}
		
		private void detach_ClosetUsages(ClosetUsage entity)
		{
			this.SendPropertyChanging();
			entity.Closet = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EnrollPayments")]
	public partial class EnrollPayment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EnrollId;
		
		private int _PaymentId;
		
		private EntityRef<Transaction> _Transaction;
		
		private EntityRef<Enroll> _Enroll;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEnrollIdChanging(int value);
    partial void OnEnrollIdChanged();
    partial void OnPaymentIdChanging(int value);
    partial void OnPaymentIdChanged();
    #endregion
		
		public EnrollPayment()
		{
			this._Transaction = default(EntityRef<Transaction>);
			this._Enroll = default(EntityRef<Enroll>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnrollId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EnrollId
		{
			get
			{
				return this._EnrollId;
			}
			set
			{
				if ((this._EnrollId != value))
				{
					if (this._Enroll.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEnrollIdChanging(value);
					this.SendPropertyChanging();
					this._EnrollId = value;
					this.SendPropertyChanged("EnrollId");
					this.OnEnrollIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PaymentId
		{
			get
			{
				return this._PaymentId;
			}
			set
			{
				if ((this._PaymentId != value))
				{
					if (this._Transaction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentIdChanging(value);
					this.SendPropertyChanging();
					this._PaymentId = value;
					this.SendPropertyChanged("PaymentId");
					this.OnPaymentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Transaction_EnrollPayment", Storage="_Transaction", ThisKey="PaymentId", OtherKey="Id", IsForeignKey=true)]
		public Transaction Transaction
		{
			get
			{
				return this._Transaction.Entity;
			}
			set
			{
				Transaction previousValue = this._Transaction.Entity;
				if (((previousValue != value) 
							|| (this._Transaction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Transaction.Entity = null;
						previousValue.EnrollPayments.Remove(this);
					}
					this._Transaction.Entity = value;
					if ((value != null))
					{
						value.EnrollPayments.Add(this);
						this._PaymentId = value.Id;
					}
					else
					{
						this._PaymentId = default(int);
					}
					this.SendPropertyChanged("Transaction");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Enroll_EnrollPayment", Storage="_Enroll", ThisKey="EnrollId", OtherKey="Id", IsForeignKey=true)]
		public Enroll Enroll
		{
			get
			{
				return this._Enroll.Entity;
			}
			set
			{
				Enroll previousValue = this._Enroll.Entity;
				if (((previousValue != value) 
							|| (this._Enroll.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Enroll.Entity = null;
						previousValue.EnrollPayments.Remove(this);
					}
					this._Enroll.Entity = value;
					if ((value != null))
					{
						value.EnrollPayments.Add(this);
						this._EnrollId = value.Id;
					}
					else
					{
						this._EnrollId = default(int);
					}
					this.SendPropertyChanged("Enroll");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Facility")]
	public partial class Facility : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _Price;
		
		private byte _Sessions;
		
		private EntitySet<CourseFacility> _CourseFacilities;
		
		private EntitySet<EnrollFacility> _EnrollFacilities;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    partial void OnSessionsChanging(byte value);
    partial void OnSessionsChanged();
    #endregion
		
		public Facility()
		{
			this._CourseFacilities = new EntitySet<CourseFacility>(new Action<CourseFacility>(this.attach_CourseFacilities), new Action<CourseFacility>(this.detach_CourseFacilities));
			this._EnrollFacilities = new EntitySet<EnrollFacility>(new Action<EnrollFacility>(this.attach_EnrollFacilities), new Action<EnrollFacility>(this.detach_EnrollFacilities));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sessions", DbType="TinyInt NOT NULL")]
		public byte Sessions
		{
			get
			{
				return this._Sessions;
			}
			set
			{
				if ((this._Sessions != value))
				{
					this.OnSessionsChanging(value);
					this.SendPropertyChanging();
					this._Sessions = value;
					this.SendPropertyChanged("Sessions");
					this.OnSessionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Facility_CourseFacility", Storage="_CourseFacilities", ThisKey="Id", OtherKey="FacilityId")]
		public EntitySet<CourseFacility> CourseFacilities
		{
			get
			{
				return this._CourseFacilities;
			}
			set
			{
				this._CourseFacilities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Facility_EnrollFacility", Storage="_EnrollFacilities", ThisKey="Id", OtherKey="FacilityId")]
		public EntitySet<EnrollFacility> EnrollFacilities
		{
			get
			{
				return this._EnrollFacilities;
			}
			set
			{
				this._EnrollFacilities.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseFacilities(CourseFacility entity)
		{
			this.SendPropertyChanging();
			entity.Facility = this;
		}
		
		private void detach_CourseFacilities(CourseFacility entity)
		{
			this.SendPropertyChanging();
			entity.Facility = null;
		}
		
		private void attach_EnrollFacilities(EnrollFacility entity)
		{
			this.SendPropertyChanging();
			entity.Facility = this;
		}
		
		private void detach_EnrollFacilities(EnrollFacility entity)
		{
			this.SendPropertyChanging();
			entity.Facility = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EnrollCourses")]
	public partial class EnrollCourse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EnrollId;
		
		private int _CourseId;
		
		private System.Nullable<int> _MentorId;
		
		private int _SessionsLeft;
		
		private EntityRef<Member> _Member;
		
		private EntityRef<Enroll> _Enroll;
		
		private EntityRef<Course> _Course;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEnrollIdChanging(int value);
    partial void OnEnrollIdChanged();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnMentorIdChanging(System.Nullable<int> value);
    partial void OnMentorIdChanged();
    partial void OnSessionsLeftChanging(int value);
    partial void OnSessionsLeftChanged();
    #endregion
		
		public EnrollCourse()
		{
			this._Member = default(EntityRef<Member>);
			this._Enroll = default(EntityRef<Enroll>);
			this._Course = default(EntityRef<Course>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnrollId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EnrollId
		{
			get
			{
				return this._EnrollId;
			}
			set
			{
				if ((this._EnrollId != value))
				{
					if (this._Enroll.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEnrollIdChanging(value);
					this.SendPropertyChanging();
					this._EnrollId = value;
					this.SendPropertyChanged("EnrollId");
					this.OnEnrollIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MentorId", DbType="Int")]
		public System.Nullable<int> MentorId
		{
			get
			{
				return this._MentorId;
			}
			set
			{
				if ((this._MentorId != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMentorIdChanging(value);
					this.SendPropertyChanging();
					this._MentorId = value;
					this.SendPropertyChanged("MentorId");
					this.OnMentorIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionsLeft", DbType="Int NOT NULL")]
		public int SessionsLeft
		{
			get
			{
				return this._SessionsLeft;
			}
			set
			{
				if ((this._SessionsLeft != value))
				{
					this.OnSessionsLeftChanging(value);
					this.SendPropertyChanging();
					this._SessionsLeft = value;
					this.SendPropertyChanged("SessionsLeft");
					this.OnSessionsLeftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_EnrollCourse", Storage="_Member", ThisKey="MentorId", OtherKey="Id", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.EnrollCourses.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.EnrollCourses.Add(this);
						this._MentorId = value.Id;
					}
					else
					{
						this._MentorId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Enroll_EnrollCourse", Storage="_Enroll", ThisKey="EnrollId", OtherKey="Id", IsForeignKey=true)]
		public Enroll Enroll
		{
			get
			{
				return this._Enroll.Entity;
			}
			set
			{
				Enroll previousValue = this._Enroll.Entity;
				if (((previousValue != value) 
							|| (this._Enroll.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Enroll.Entity = null;
						previousValue.EnrollCourses.Remove(this);
					}
					this._Enroll.Entity = value;
					if ((value != null))
					{
						value.EnrollCourses.Add(this);
						this._EnrollId = value.Id;
					}
					else
					{
						this._EnrollId = default(int);
					}
					this.SendPropertyChanged("Enroll");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_EnrollCourse", Storage="_Course", ThisKey="CourseId", OtherKey="Id", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.EnrollCourses.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.EnrollCourses.Add(this);
						this._CourseId = value.Id;
					}
					else
					{
						this._CourseId = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EnrollFacility")]
	public partial class EnrollFacility : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EnrollId;
		
		private int _FacilityId;
		
		private int _SessionsLeft;
		
		private EntityRef<Facility> _Facility;
		
		private EntityRef<Enroll> _Enroll;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEnrollIdChanging(int value);
    partial void OnEnrollIdChanged();
    partial void OnFacilityIdChanging(int value);
    partial void OnFacilityIdChanged();
    partial void OnSessionsLeftChanging(int value);
    partial void OnSessionsLeftChanged();
    #endregion
		
		public EnrollFacility()
		{
			this._Facility = default(EntityRef<Facility>);
			this._Enroll = default(EntityRef<Enroll>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnrollId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EnrollId
		{
			get
			{
				return this._EnrollId;
			}
			set
			{
				if ((this._EnrollId != value))
				{
					if (this._Enroll.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEnrollIdChanging(value);
					this.SendPropertyChanging();
					this._EnrollId = value;
					this.SendPropertyChanged("EnrollId");
					this.OnEnrollIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FacilityId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FacilityId
		{
			get
			{
				return this._FacilityId;
			}
			set
			{
				if ((this._FacilityId != value))
				{
					if (this._Facility.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFacilityIdChanging(value);
					this.SendPropertyChanging();
					this._FacilityId = value;
					this.SendPropertyChanged("FacilityId");
					this.OnFacilityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionsLeft", DbType="Int NOT NULL")]
		public int SessionsLeft
		{
			get
			{
				return this._SessionsLeft;
			}
			set
			{
				if ((this._SessionsLeft != value))
				{
					this.OnSessionsLeftChanging(value);
					this.SendPropertyChanging();
					this._SessionsLeft = value;
					this.SendPropertyChanged("SessionsLeft");
					this.OnSessionsLeftChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Facility_EnrollFacility", Storage="_Facility", ThisKey="FacilityId", OtherKey="Id", IsForeignKey=true)]
		public Facility Facility
		{
			get
			{
				return this._Facility.Entity;
			}
			set
			{
				Facility previousValue = this._Facility.Entity;
				if (((previousValue != value) 
							|| (this._Facility.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Facility.Entity = null;
						previousValue.EnrollFacilities.Remove(this);
					}
					this._Facility.Entity = value;
					if ((value != null))
					{
						value.EnrollFacilities.Add(this);
						this._FacilityId = value.Id;
					}
					else
					{
						this._FacilityId = default(int);
					}
					this.SendPropertyChanged("Facility");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Enroll_EnrollFacility", Storage="_Enroll", ThisKey="EnrollId", OtherKey="Id", IsForeignKey=true)]
		public Enroll Enroll
		{
			get
			{
				return this._Enroll.Entity;
			}
			set
			{
				Enroll previousValue = this._Enroll.Entity;
				if (((previousValue != value) 
							|| (this._Enroll.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Enroll.Entity = null;
						previousValue.EnrollFacilities.Remove(this);
					}
					this._Enroll.Entity = value;
					if ((value != null))
					{
						value.EnrollFacilities.Add(this);
						this._EnrollId = value.Id;
					}
					else
					{
						this._EnrollId = default(int);
					}
					this.SendPropertyChanged("Enroll");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Transaction]")]
	public partial class Transaction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _Datetime;
		
		private int _Amount;
		
		private System.Nullable<int> _MemberId;
		
		private byte _Type;
		
		private byte _Method;
		
		private string _Info;
		
		private System.Nullable<int> _CostId;
		
		private int _UserId;
		
		private EntitySet<EnrollPayment> _EnrollPayments;
		
		private EntitySet<Enroll> _Enrolls;
		
		private EntityRef<Cost> _Cost;
		
		private EntityRef<Member> _Member;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDatetimeChanging(System.DateTime value);
    partial void OnDatetimeChanged();
    partial void OnAmountChanging(int value);
    partial void OnAmountChanged();
    partial void OnMemberIdChanging(System.Nullable<int> value);
    partial void OnMemberIdChanged();
    partial void OnTypeChanging(byte value);
    partial void OnTypeChanged();
    partial void OnMethodChanging(byte value);
    partial void OnMethodChanged();
    partial void OnInfoChanging(string value);
    partial void OnInfoChanged();
    partial void OnCostIdChanging(System.Nullable<int> value);
    partial void OnCostIdChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    #endregion
		
		public Transaction()
		{
			this._EnrollPayments = new EntitySet<EnrollPayment>(new Action<EnrollPayment>(this.attach_EnrollPayments), new Action<EnrollPayment>(this.detach_EnrollPayments));
			this._Enrolls = new EntitySet<Enroll>(new Action<Enroll>(this.attach_Enrolls), new Action<Enroll>(this.detach_Enrolls));
			this._Cost = default(EntityRef<Cost>);
			this._Member = default(EntityRef<Member>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Datetime", DbType="DateTime NOT NULL")]
		public System.DateTime Datetime
		{
			get
			{
				return this._Datetime;
			}
			set
			{
				if ((this._Datetime != value))
				{
					this.OnDatetimeChanging(value);
					this.SendPropertyChanging();
					this._Datetime = value;
					this.SendPropertyChanged("Datetime");
					this.OnDatetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Int NOT NULL")]
		public int Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberId", DbType="Int")]
		public System.Nullable<int> MemberId
		{
			get
			{
				return this._MemberId;
			}
			set
			{
				if ((this._MemberId != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIdChanging(value);
					this.SendPropertyChanging();
					this._MemberId = value;
					this.SendPropertyChanged("MemberId");
					this.OnMemberIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", DbType="TinyInt NOT NULL")]
		public byte Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Method", DbType="TinyInt NOT NULL")]
		public byte Method
		{
			get
			{
				return this._Method;
			}
			set
			{
				if ((this._Method != value))
				{
					this.OnMethodChanging(value);
					this.SendPropertyChanging();
					this._Method = value;
					this.SendPropertyChanged("Method");
					this.OnMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Info", DbType="NVarChar(500)")]
		public string Info
		{
			get
			{
				return this._Info;
			}
			set
			{
				if ((this._Info != value))
				{
					this.OnInfoChanging(value);
					this.SendPropertyChanging();
					this._Info = value;
					this.SendPropertyChanged("Info");
					this.OnInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CostId", DbType="Int")]
		public System.Nullable<int> CostId
		{
			get
			{
				return this._CostId;
			}
			set
			{
				if ((this._CostId != value))
				{
					if (this._Cost.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCostIdChanging(value);
					this.SendPropertyChanging();
					this._CostId = value;
					this.SendPropertyChanged("CostId");
					this.OnCostIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Transaction_EnrollPayment", Storage="_EnrollPayments", ThisKey="Id", OtherKey="PaymentId")]
		public EntitySet<EnrollPayment> EnrollPayments
		{
			get
			{
				return this._EnrollPayments;
			}
			set
			{
				this._EnrollPayments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Transaction_Enroll", Storage="_Enrolls", ThisKey="Id", OtherKey="PaymentId")]
		public EntitySet<Enroll> Enrolls
		{
			get
			{
				return this._Enrolls;
			}
			set
			{
				this._Enrolls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Cost_Transaction", Storage="_Cost", ThisKey="CostId", OtherKey="Id", IsForeignKey=true)]
		public Cost Cost
		{
			get
			{
				return this._Cost.Entity;
			}
			set
			{
				Cost previousValue = this._Cost.Entity;
				if (((previousValue != value) 
							|| (this._Cost.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Cost.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Cost.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._CostId = value.Id;
					}
					else
					{
						this._CostId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Cost");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Transaction", Storage="_Member", ThisKey="MemberId", OtherKey="Id", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._MemberId = value.Id;
					}
					else
					{
						this._MemberId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Transaction", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Transactions.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Transactions.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EnrollPayments(EnrollPayment entity)
		{
			this.SendPropertyChanging();
			entity.Transaction = this;
		}
		
		private void detach_EnrollPayments(EnrollPayment entity)
		{
			this.SendPropertyChanging();
			entity.Transaction = null;
		}
		
		private void attach_Enrolls(Enroll entity)
		{
			this.SendPropertyChanging();
			entity.Transaction = this;
		}
		
		private void detach_Enrolls(Enroll entity)
		{
			this.SendPropertyChanging();
			entity.Transaction = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Members")]
	public partial class Member : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Firstname;
		
		private string _Lastname;
		
		private string _Dadsname;
		
		private string _Birthdate;
		
		private string _NationalCode;
		
		private string _Mobile;
		
		private string _Address;
		
		private string _Description;
		
		private bool _IsActive;
		
		private bool _IsDeleted;
		
		private bool _IsStaff;
		
		private int _Credit;
		
		private string _InsuranceExpiry;
		
		private bool _IsMentor;
		
		private string _Referrer;
		
		private string _ReferrerMobile;
		
		private int _Debtor;
		
		private string _InsuranceNo;
		
		private bool _IsRegular;
		
		private int _UserId;
		
		private System.DateTime _Date;
		
		private EntitySet<Passage> _Passages;
		
		private EntitySet<SportMentor> _SportMentors;
		
		private EntitySet<ClosetUsage> _ClosetUsages;
		
		private EntitySet<Closet> _Closets;
		
		private EntitySet<Closet> _Closets1;
		
		private EntitySet<EnrollCourse> _EnrollCourses;
		
		private EntitySet<Transaction> _Transactions;
		
		private EntitySet<Enroll> _Enrolls;
		
		private EntitySet<Trade> _Trades;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFirstnameChanging(string value);
    partial void OnFirstnameChanged();
    partial void OnLastnameChanging(string value);
    partial void OnLastnameChanged();
    partial void OnDadsnameChanging(string value);
    partial void OnDadsnameChanged();
    partial void OnBirthdateChanging(string value);
    partial void OnBirthdateChanged();
    partial void OnNationalCodeChanging(string value);
    partial void OnNationalCodeChanged();
    partial void OnMobileChanging(string value);
    partial void OnMobileChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    partial void OnIsStaffChanging(bool value);
    partial void OnIsStaffChanged();
    partial void OnCreditChanging(int value);
    partial void OnCreditChanged();
    partial void OnInsuranceExpiryChanging(string value);
    partial void OnInsuranceExpiryChanged();
    partial void OnIsMentorChanging(bool value);
    partial void OnIsMentorChanged();
    partial void OnReferrerChanging(string value);
    partial void OnReferrerChanged();
    partial void OnReferrerMobileChanging(string value);
    partial void OnReferrerMobileChanged();
    partial void OnDebtorChanging(int value);
    partial void OnDebtorChanged();
    partial void OnInsuranceNoChanging(string value);
    partial void OnInsuranceNoChanged();
    partial void OnIsRegularChanging(bool value);
    partial void OnIsRegularChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public Member()
		{
			this._Passages = new EntitySet<Passage>(new Action<Passage>(this.attach_Passages), new Action<Passage>(this.detach_Passages));
			this._SportMentors = new EntitySet<SportMentor>(new Action<SportMentor>(this.attach_SportMentors), new Action<SportMentor>(this.detach_SportMentors));
			this._ClosetUsages = new EntitySet<ClosetUsage>(new Action<ClosetUsage>(this.attach_ClosetUsages), new Action<ClosetUsage>(this.detach_ClosetUsages));
			this._Closets = new EntitySet<Closet>(new Action<Closet>(this.attach_Closets), new Action<Closet>(this.detach_Closets));
			this._Closets1 = new EntitySet<Closet>(new Action<Closet>(this.attach_Closets1), new Action<Closet>(this.detach_Closets1));
			this._EnrollCourses = new EntitySet<EnrollCourse>(new Action<EnrollCourse>(this.attach_EnrollCourses), new Action<EnrollCourse>(this.detach_EnrollCourses));
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			this._Enrolls = new EntitySet<Enroll>(new Action<Enroll>(this.attach_Enrolls), new Action<Enroll>(this.detach_Enrolls));
			this._Trades = new EntitySet<Trade>(new Action<Trade>(this.attach_Trades), new Action<Trade>(this.detach_Trades));
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Firstname", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Firstname
		{
			get
			{
				return this._Firstname;
			}
			set
			{
				if ((this._Firstname != value))
				{
					this.OnFirstnameChanging(value);
					this.SendPropertyChanging();
					this._Firstname = value;
					this.SendPropertyChanged("Firstname");
					this.OnFirstnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lastname", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Lastname
		{
			get
			{
				return this._Lastname;
			}
			set
			{
				if ((this._Lastname != value))
				{
					this.OnLastnameChanging(value);
					this.SendPropertyChanging();
					this._Lastname = value;
					this.SendPropertyChanged("Lastname");
					this.OnLastnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dadsname", DbType="NVarChar(100)")]
		public string Dadsname
		{
			get
			{
				return this._Dadsname;
			}
			set
			{
				if ((this._Dadsname != value))
				{
					this.OnDadsnameChanging(value);
					this.SendPropertyChanging();
					this._Dadsname = value;
					this.SendPropertyChanged("Dadsname");
					this.OnDadsnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Birthdate", DbType="Char(10)")]
		public string Birthdate
		{
			get
			{
				return this._Birthdate;
			}
			set
			{
				if ((this._Birthdate != value))
				{
					this.OnBirthdateChanging(value);
					this.SendPropertyChanging();
					this._Birthdate = value;
					this.SendPropertyChanged("Birthdate");
					this.OnBirthdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NationalCode", DbType="Char(10)")]
		public string NationalCode
		{
			get
			{
				return this._NationalCode;
			}
			set
			{
				if ((this._NationalCode != value))
				{
					this.OnNationalCodeChanging(value);
					this.SendPropertyChanging();
					this._NationalCode = value;
					this.SendPropertyChanged("NationalCode");
					this.OnNationalCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mobile", DbType="Char(11) NOT NULL", CanBeNull=false)]
		public string Mobile
		{
			get
			{
				return this._Mobile;
			}
			set
			{
				if ((this._Mobile != value))
				{
					this.OnMobileChanging(value);
					this.SendPropertyChanging();
					this._Mobile = value;
					this.SendPropertyChanged("Mobile");
					this.OnMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(200)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsStaff", DbType="Bit NOT NULL")]
		public bool IsStaff
		{
			get
			{
				return this._IsStaff;
			}
			set
			{
				if ((this._IsStaff != value))
				{
					this.OnIsStaffChanging(value);
					this.SendPropertyChanging();
					this._IsStaff = value;
					this.SendPropertyChanged("IsStaff");
					this.OnIsStaffChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Credit", DbType="Int NOT NULL")]
		public int Credit
		{
			get
			{
				return this._Credit;
			}
			set
			{
				if ((this._Credit != value))
				{
					this.OnCreditChanging(value);
					this.SendPropertyChanging();
					this._Credit = value;
					this.SendPropertyChanged("Credit");
					this.OnCreditChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceExpiry", DbType="Char(10)")]
		public string InsuranceExpiry
		{
			get
			{
				return this._InsuranceExpiry;
			}
			set
			{
				if ((this._InsuranceExpiry != value))
				{
					this.OnInsuranceExpiryChanging(value);
					this.SendPropertyChanging();
					this._InsuranceExpiry = value;
					this.SendPropertyChanged("InsuranceExpiry");
					this.OnInsuranceExpiryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsMentor", DbType="Bit NOT NULL")]
		public bool IsMentor
		{
			get
			{
				return this._IsMentor;
			}
			set
			{
				if ((this._IsMentor != value))
				{
					this.OnIsMentorChanging(value);
					this.SendPropertyChanging();
					this._IsMentor = value;
					this.SendPropertyChanged("IsMentor");
					this.OnIsMentorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Referrer", DbType="NVarChar(100)")]
		public string Referrer
		{
			get
			{
				return this._Referrer;
			}
			set
			{
				if ((this._Referrer != value))
				{
					this.OnReferrerChanging(value);
					this.SendPropertyChanging();
					this._Referrer = value;
					this.SendPropertyChanged("Referrer");
					this.OnReferrerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReferrerMobile", DbType="Char(11)")]
		public string ReferrerMobile
		{
			get
			{
				return this._ReferrerMobile;
			}
			set
			{
				if ((this._ReferrerMobile != value))
				{
					this.OnReferrerMobileChanging(value);
					this.SendPropertyChanging();
					this._ReferrerMobile = value;
					this.SendPropertyChanged("ReferrerMobile");
					this.OnReferrerMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Debtor", DbType="Int NOT NULL")]
		public int Debtor
		{
			get
			{
				return this._Debtor;
			}
			set
			{
				if ((this._Debtor != value))
				{
					this.OnDebtorChanging(value);
					this.SendPropertyChanging();
					this._Debtor = value;
					this.SendPropertyChanged("Debtor");
					this.OnDebtorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceNo", DbType="NVarChar(50)")]
		public string InsuranceNo
		{
			get
			{
				return this._InsuranceNo;
			}
			set
			{
				if ((this._InsuranceNo != value))
				{
					this.OnInsuranceNoChanging(value);
					this.SendPropertyChanging();
					this._InsuranceNo = value;
					this.SendPropertyChanged("InsuranceNo");
					this.OnInsuranceNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsRegular", DbType="Bit NOT NULL")]
		public bool IsRegular
		{
			get
			{
				return this._IsRegular;
			}
			set
			{
				if ((this._IsRegular != value))
				{
					this.OnIsRegularChanging(value);
					this.SendPropertyChanging();
					this._IsRegular = value;
					this.SendPropertyChanged("IsRegular");
					this.OnIsRegularChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="Date NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Passage", Storage="_Passages", ThisKey="Id", OtherKey="MemberId")]
		public EntitySet<Passage> Passages
		{
			get
			{
				return this._Passages;
			}
			set
			{
				this._Passages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_SportMentor", Storage="_SportMentors", ThisKey="Id", OtherKey="MentorId")]
		public EntitySet<SportMentor> SportMentors
		{
			get
			{
				return this._SportMentors;
			}
			set
			{
				this._SportMentors.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_ClosetUsage", Storage="_ClosetUsages", ThisKey="Id", OtherKey="MemberId")]
		public EntitySet<ClosetUsage> ClosetUsages
		{
			get
			{
				return this._ClosetUsages;
			}
			set
			{
				this._ClosetUsages.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Closet", Storage="_Closets", ThisKey="Id", OtherKey="RentorId")]
		public EntitySet<Closet> Closets
		{
			get
			{
				return this._Closets;
			}
			set
			{
				this._Closets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Closet1", Storage="_Closets1", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<Closet> Closets1
		{
			get
			{
				return this._Closets1;
			}
			set
			{
				this._Closets1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_EnrollCourse", Storage="_EnrollCourses", ThisKey="Id", OtherKey="MentorId")]
		public EntitySet<EnrollCourse> EnrollCourses
		{
			get
			{
				return this._EnrollCourses;
			}
			set
			{
				this._EnrollCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Transaction", Storage="_Transactions", ThisKey="Id", OtherKey="MemberId")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Enroll", Storage="_Enrolls", ThisKey="Id", OtherKey="MemberId")]
		public EntitySet<Enroll> Enrolls
		{
			get
			{
				return this._Enrolls;
			}
			set
			{
				this._Enrolls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Trade", Storage="_Trades", ThisKey="Id", OtherKey="MemberId")]
		public EntitySet<Trade> Trades
		{
			get
			{
				return this._Trades;
			}
			set
			{
				this._Trades.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Member", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Members.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Members.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Passages(Passage entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_Passages(Passage entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_SportMentors(SportMentor entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_SportMentors(SportMentor entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_ClosetUsages(ClosetUsage entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_ClosetUsages(ClosetUsage entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_Closets(Closet entity)
		{
			this.SendPropertyChanging();
			entity.Rentor = this;
		}
		
		private void detach_Closets(Closet entity)
		{
			this.SendPropertyChanging();
			entity.Rentor = null;
		}
		
		private void attach_Closets1(Closet entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Closets1(Closet entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_EnrollCourses(EnrollCourse entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_EnrollCourses(EnrollCourse entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_Enrolls(Enroll entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_Enrolls(Enroll entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_Trades(Trade entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_Trades(Trade entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Enroll")]
	public partial class Enroll : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _MemberId;
		
		private System.DateTime _EnrollDate;
		
		private System.Nullable<System.DateTime> _StartDate;
		
		private System.Nullable<System.DateTime> _ExpireDate;
		
		private bool _IsActive;
		
		private byte _Frequency;
		
		private byte _Duration;
		
		private System.Nullable<byte> _Sessions;
		
		private int _Price;
		
		private int _Discount;
		
		private System.Nullable<int> _PaymentId;
		
		private int _InsuranceFee;
		
		private int _UserId;
		
		private int _Freeze;
		
		private EntitySet<EnrollPayment> _EnrollPayments;
		
		private EntitySet<EnrollCourse> _EnrollCourses;
		
		private EntitySet<EnrollFacility> _EnrollFacilities;
		
		private EntityRef<Member> _Member;
		
		private EntityRef<Transaction> _Transaction;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMemberIdChanging(int value);
    partial void OnMemberIdChanged();
    partial void OnEnrollDateChanging(System.DateTime value);
    partial void OnEnrollDateChanged();
    partial void OnStartDateChanging(System.Nullable<System.DateTime> value);
    partial void OnStartDateChanged();
    partial void OnExpireDateChanging(System.Nullable<System.DateTime> value);
    partial void OnExpireDateChanged();
    partial void OnIsActiveChanging(bool value);
    partial void OnIsActiveChanged();
    partial void OnFrequencyChanging(byte value);
    partial void OnFrequencyChanged();
    partial void OnDurationChanging(byte value);
    partial void OnDurationChanged();
    partial void OnSessionsChanging(System.Nullable<byte> value);
    partial void OnSessionsChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    partial void OnDiscountChanging(int value);
    partial void OnDiscountChanged();
    partial void OnPaymentIdChanging(System.Nullable<int> value);
    partial void OnPaymentIdChanged();
    partial void OnInsuranceFeeChanging(int value);
    partial void OnInsuranceFeeChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnFreezeChanging(int value);
    partial void OnFreezeChanged();
    #endregion
		
		public Enroll()
		{
			this._EnrollPayments = new EntitySet<EnrollPayment>(new Action<EnrollPayment>(this.attach_EnrollPayments), new Action<EnrollPayment>(this.detach_EnrollPayments));
			this._EnrollCourses = new EntitySet<EnrollCourse>(new Action<EnrollCourse>(this.attach_EnrollCourses), new Action<EnrollCourse>(this.detach_EnrollCourses));
			this._EnrollFacilities = new EntitySet<EnrollFacility>(new Action<EnrollFacility>(this.attach_EnrollFacilities), new Action<EnrollFacility>(this.detach_EnrollFacilities));
			this._Member = default(EntityRef<Member>);
			this._Transaction = default(EntityRef<Transaction>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberId", DbType="Int NOT NULL")]
		public int MemberId
		{
			get
			{
				return this._MemberId;
			}
			set
			{
				if ((this._MemberId != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIdChanging(value);
					this.SendPropertyChanging();
					this._MemberId = value;
					this.SendPropertyChanged("MemberId");
					this.OnMemberIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EnrollDate", DbType="Date NOT NULL")]
		public System.DateTime EnrollDate
		{
			get
			{
				return this._EnrollDate;
			}
			set
			{
				if ((this._EnrollDate != value))
				{
					this.OnEnrollDateChanging(value);
					this.SendPropertyChanging();
					this._EnrollDate = value;
					this.SendPropertyChanged("EnrollDate");
					this.OnEnrollDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date")]
		public System.Nullable<System.DateTime> StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpireDate", DbType="Date")]
		public System.Nullable<System.DateTime> ExpireDate
		{
			get
			{
				return this._ExpireDate;
			}
			set
			{
				if ((this._ExpireDate != value))
				{
					this.OnExpireDateChanging(value);
					this.SendPropertyChanging();
					this._ExpireDate = value;
					this.SendPropertyChanged("ExpireDate");
					this.OnExpireDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsActive", DbType="Bit NOT NULL")]
		public bool IsActive
		{
			get
			{
				return this._IsActive;
			}
			set
			{
				if ((this._IsActive != value))
				{
					this.OnIsActiveChanging(value);
					this.SendPropertyChanging();
					this._IsActive = value;
					this.SendPropertyChanged("IsActive");
					this.OnIsActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Frequency", DbType="TinyInt NOT NULL")]
		public byte Frequency
		{
			get
			{
				return this._Frequency;
			}
			set
			{
				if ((this._Frequency != value))
				{
					this.OnFrequencyChanging(value);
					this.SendPropertyChanging();
					this._Frequency = value;
					this.SendPropertyChanged("Frequency");
					this.OnFrequencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Duration", DbType="TinyInt NOT NULL")]
		public byte Duration
		{
			get
			{
				return this._Duration;
			}
			set
			{
				if ((this._Duration != value))
				{
					this.OnDurationChanging(value);
					this.SendPropertyChanging();
					this._Duration = value;
					this.SendPropertyChanged("Duration");
					this.OnDurationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sessions", DbType="TinyInt")]
		public System.Nullable<byte> Sessions
		{
			get
			{
				return this._Sessions;
			}
			set
			{
				if ((this._Sessions != value))
				{
					this.OnSessionsChanging(value);
					this.SendPropertyChanging();
					this._Sessions = value;
					this.SendPropertyChanged("Sessions");
					this.OnSessionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discount", DbType="Int NOT NULL")]
		public int Discount
		{
			get
			{
				return this._Discount;
			}
			set
			{
				if ((this._Discount != value))
				{
					this.OnDiscountChanging(value);
					this.SendPropertyChanging();
					this._Discount = value;
					this.SendPropertyChanged("Discount");
					this.OnDiscountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaymentId", DbType="Int")]
		public System.Nullable<int> PaymentId
		{
			get
			{
				return this._PaymentId;
			}
			set
			{
				if ((this._PaymentId != value))
				{
					if (this._Transaction.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPaymentIdChanging(value);
					this.SendPropertyChanging();
					this._PaymentId = value;
					this.SendPropertyChanged("PaymentId");
					this.OnPaymentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceFee", DbType="Int NOT NULL")]
		public int InsuranceFee
		{
			get
			{
				return this._InsuranceFee;
			}
			set
			{
				if ((this._InsuranceFee != value))
				{
					this.OnInsuranceFeeChanging(value);
					this.SendPropertyChanging();
					this._InsuranceFee = value;
					this.SendPropertyChanged("InsuranceFee");
					this.OnInsuranceFeeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Freeze", DbType="Int NOT NULL")]
		public int Freeze
		{
			get
			{
				return this._Freeze;
			}
			set
			{
				if ((this._Freeze != value))
				{
					this.OnFreezeChanging(value);
					this.SendPropertyChanging();
					this._Freeze = value;
					this.SendPropertyChanged("Freeze");
					this.OnFreezeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Enroll_EnrollPayment", Storage="_EnrollPayments", ThisKey="Id", OtherKey="EnrollId")]
		public EntitySet<EnrollPayment> EnrollPayments
		{
			get
			{
				return this._EnrollPayments;
			}
			set
			{
				this._EnrollPayments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Enroll_EnrollCourse", Storage="_EnrollCourses", ThisKey="Id", OtherKey="EnrollId")]
		public EntitySet<EnrollCourse> EnrollCourses
		{
			get
			{
				return this._EnrollCourses;
			}
			set
			{
				this._EnrollCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Enroll_EnrollFacility", Storage="_EnrollFacilities", ThisKey="Id", OtherKey="EnrollId")]
		public EntitySet<EnrollFacility> EnrollFacilities
		{
			get
			{
				return this._EnrollFacilities;
			}
			set
			{
				this._EnrollFacilities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Enroll", Storage="_Member", ThisKey="MemberId", OtherKey="Id", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.Enrolls.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.Enrolls.Add(this);
						this._MemberId = value.Id;
					}
					else
					{
						this._MemberId = default(int);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Transaction_Enroll", Storage="_Transaction", ThisKey="PaymentId", OtherKey="Id", IsForeignKey=true)]
		public Transaction Transaction
		{
			get
			{
				return this._Transaction.Entity;
			}
			set
			{
				Transaction previousValue = this._Transaction.Entity;
				if (((previousValue != value) 
							|| (this._Transaction.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Transaction.Entity = null;
						previousValue.Enrolls.Remove(this);
					}
					this._Transaction.Entity = value;
					if ((value != null))
					{
						value.Enrolls.Add(this);
						this._PaymentId = value.Id;
					}
					else
					{
						this._PaymentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Transaction");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Enroll", Storage="_User", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Enrolls.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Enrolls.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EnrollPayments(EnrollPayment entity)
		{
			this.SendPropertyChanging();
			entity.Enroll = this;
		}
		
		private void detach_EnrollPayments(EnrollPayment entity)
		{
			this.SendPropertyChanging();
			entity.Enroll = null;
		}
		
		private void attach_EnrollCourses(EnrollCourse entity)
		{
			this.SendPropertyChanging();
			entity.Enroll = this;
		}
		
		private void detach_EnrollCourses(EnrollCourse entity)
		{
			this.SendPropertyChanging();
			entity.Enroll = null;
		}
		
		private void attach_EnrollFacilities(EnrollFacility entity)
		{
			this.SendPropertyChanging();
			entity.Enroll = this;
		}
		
		private void detach_EnrollFacilities(EnrollFacility entity)
		{
			this.SendPropertyChanging();
			entity.Enroll = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Course")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private bool _IsVIP;
		
		private int _SessionPrice;
		
		private int _MonthPrice;
		
		private int _TwoMonthPrice;
		
		private int _SeasonPrice;
		
		private int _HalfYearPrice;
		
		private int _NineMonthPrice;
		
		private int _YearPrice;
		
		private int _MonthPrice2;
		
		private int _TwoMonthPrice2;
		
		private int _SeasonPrice2;
		
		private int _HalfYearPrice2;
		
		private int _NineMonthPrice2;
		
		private int _YearPrice2;
		
		private int _Freeze;
		
		private int _SportId;
		
		private int _Freeze2;
		
		private int _Freeze3;
		
		private int _Freeze6;
		
		private int _Freeze9;
		
		private int _Freeze12;
		
		private EntitySet<CourseFacility> _CourseFacilities;
		
		private EntitySet<EnrollCourse> _EnrollCourses;
		
		private EntityRef<Sport> _Sport;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIsVIPChanging(bool value);
    partial void OnIsVIPChanged();
    partial void OnSessionPriceChanging(int value);
    partial void OnSessionPriceChanged();
    partial void OnMonthPriceChanging(int value);
    partial void OnMonthPriceChanged();
    partial void OnTwoMonthPriceChanging(int value);
    partial void OnTwoMonthPriceChanged();
    partial void OnSeasonPriceChanging(int value);
    partial void OnSeasonPriceChanged();
    partial void OnHalfYearPriceChanging(int value);
    partial void OnHalfYearPriceChanged();
    partial void OnNineMonthPriceChanging(int value);
    partial void OnNineMonthPriceChanged();
    partial void OnYearPriceChanging(int value);
    partial void OnYearPriceChanged();
    partial void OnMonthPrice2Changing(int value);
    partial void OnMonthPrice2Changed();
    partial void OnTwoMonthPrice2Changing(int value);
    partial void OnTwoMonthPrice2Changed();
    partial void OnSeasonPrice2Changing(int value);
    partial void OnSeasonPrice2Changed();
    partial void OnHalfYearPrice2Changing(int value);
    partial void OnHalfYearPrice2Changed();
    partial void OnNineMonthPrice2Changing(int value);
    partial void OnNineMonthPrice2Changed();
    partial void OnYearPrice2Changing(int value);
    partial void OnYearPrice2Changed();
    partial void OnFreezeChanging(int value);
    partial void OnFreezeChanged();
    partial void OnSportIdChanging(int value);
    partial void OnSportIdChanged();
    partial void OnFreeze2Changing(int value);
    partial void OnFreeze2Changed();
    partial void OnFreeze3Changing(int value);
    partial void OnFreeze3Changed();
    partial void OnFreeze6Changing(int value);
    partial void OnFreeze6Changed();
    partial void OnFreeze9Changing(int value);
    partial void OnFreeze9Changed();
    partial void OnFreeze12Changing(int value);
    partial void OnFreeze12Changed();
    #endregion
		
		public Course()
		{
			this._CourseFacilities = new EntitySet<CourseFacility>(new Action<CourseFacility>(this.attach_CourseFacilities), new Action<CourseFacility>(this.detach_CourseFacilities));
			this._EnrollCourses = new EntitySet<EnrollCourse>(new Action<EnrollCourse>(this.attach_EnrollCourses), new Action<EnrollCourse>(this.detach_EnrollCourses));
			this._Sport = default(EntityRef<Sport>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsVIP", DbType="Bit NOT NULL")]
		public bool IsVIP
		{
			get
			{
				return this._IsVIP;
			}
			set
			{
				if ((this._IsVIP != value))
				{
					this.OnIsVIPChanging(value);
					this.SendPropertyChanging();
					this._IsVIP = value;
					this.SendPropertyChanged("IsVIP");
					this.OnIsVIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionPrice", DbType="Int NOT NULL")]
		public int SessionPrice
		{
			get
			{
				return this._SessionPrice;
			}
			set
			{
				if ((this._SessionPrice != value))
				{
					this.OnSessionPriceChanging(value);
					this.SendPropertyChanging();
					this._SessionPrice = value;
					this.SendPropertyChanged("SessionPrice");
					this.OnSessionPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonthPrice", DbType="Int NOT NULL")]
		public int MonthPrice
		{
			get
			{
				return this._MonthPrice;
			}
			set
			{
				if ((this._MonthPrice != value))
				{
					this.OnMonthPriceChanging(value);
					this.SendPropertyChanging();
					this._MonthPrice = value;
					this.SendPropertyChanged("MonthPrice");
					this.OnMonthPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwoMonthPrice", DbType="Int NOT NULL")]
		public int TwoMonthPrice
		{
			get
			{
				return this._TwoMonthPrice;
			}
			set
			{
				if ((this._TwoMonthPrice != value))
				{
					this.OnTwoMonthPriceChanging(value);
					this.SendPropertyChanging();
					this._TwoMonthPrice = value;
					this.SendPropertyChanged("TwoMonthPrice");
					this.OnTwoMonthPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonPrice", DbType="Int NOT NULL")]
		public int SeasonPrice
		{
			get
			{
				return this._SeasonPrice;
			}
			set
			{
				if ((this._SeasonPrice != value))
				{
					this.OnSeasonPriceChanging(value);
					this.SendPropertyChanging();
					this._SeasonPrice = value;
					this.SendPropertyChanged("SeasonPrice");
					this.OnSeasonPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HalfYearPrice", DbType="Int NOT NULL")]
		public int HalfYearPrice
		{
			get
			{
				return this._HalfYearPrice;
			}
			set
			{
				if ((this._HalfYearPrice != value))
				{
					this.OnHalfYearPriceChanging(value);
					this.SendPropertyChanging();
					this._HalfYearPrice = value;
					this.SendPropertyChanged("HalfYearPrice");
					this.OnHalfYearPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NineMonthPrice", DbType="Int NOT NULL")]
		public int NineMonthPrice
		{
			get
			{
				return this._NineMonthPrice;
			}
			set
			{
				if ((this._NineMonthPrice != value))
				{
					this.OnNineMonthPriceChanging(value);
					this.SendPropertyChanging();
					this._NineMonthPrice = value;
					this.SendPropertyChanged("NineMonthPrice");
					this.OnNineMonthPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearPrice", DbType="Int NOT NULL")]
		public int YearPrice
		{
			get
			{
				return this._YearPrice;
			}
			set
			{
				if ((this._YearPrice != value))
				{
					this.OnYearPriceChanging(value);
					this.SendPropertyChanging();
					this._YearPrice = value;
					this.SendPropertyChanged("YearPrice");
					this.OnYearPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MonthPrice2", DbType="Int NOT NULL")]
		public int MonthPrice2
		{
			get
			{
				return this._MonthPrice2;
			}
			set
			{
				if ((this._MonthPrice2 != value))
				{
					this.OnMonthPrice2Changing(value);
					this.SendPropertyChanging();
					this._MonthPrice2 = value;
					this.SendPropertyChanged("MonthPrice2");
					this.OnMonthPrice2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwoMonthPrice2", DbType="Int NOT NULL")]
		public int TwoMonthPrice2
		{
			get
			{
				return this._TwoMonthPrice2;
			}
			set
			{
				if ((this._TwoMonthPrice2 != value))
				{
					this.OnTwoMonthPrice2Changing(value);
					this.SendPropertyChanging();
					this._TwoMonthPrice2 = value;
					this.SendPropertyChanged("TwoMonthPrice2");
					this.OnTwoMonthPrice2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SeasonPrice2", DbType="Int NOT NULL")]
		public int SeasonPrice2
		{
			get
			{
				return this._SeasonPrice2;
			}
			set
			{
				if ((this._SeasonPrice2 != value))
				{
					this.OnSeasonPrice2Changing(value);
					this.SendPropertyChanging();
					this._SeasonPrice2 = value;
					this.SendPropertyChanged("SeasonPrice2");
					this.OnSeasonPrice2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HalfYearPrice2", DbType="Int NOT NULL")]
		public int HalfYearPrice2
		{
			get
			{
				return this._HalfYearPrice2;
			}
			set
			{
				if ((this._HalfYearPrice2 != value))
				{
					this.OnHalfYearPrice2Changing(value);
					this.SendPropertyChanging();
					this._HalfYearPrice2 = value;
					this.SendPropertyChanged("HalfYearPrice2");
					this.OnHalfYearPrice2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NineMonthPrice2", DbType="Int NOT NULL")]
		public int NineMonthPrice2
		{
			get
			{
				return this._NineMonthPrice2;
			}
			set
			{
				if ((this._NineMonthPrice2 != value))
				{
					this.OnNineMonthPrice2Changing(value);
					this.SendPropertyChanging();
					this._NineMonthPrice2 = value;
					this.SendPropertyChanged("NineMonthPrice2");
					this.OnNineMonthPrice2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearPrice2", DbType="Int NOT NULL")]
		public int YearPrice2
		{
			get
			{
				return this._YearPrice2;
			}
			set
			{
				if ((this._YearPrice2 != value))
				{
					this.OnYearPrice2Changing(value);
					this.SendPropertyChanging();
					this._YearPrice2 = value;
					this.SendPropertyChanged("YearPrice2");
					this.OnYearPrice2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Freeze", DbType="Int NOT NULL")]
		public int Freeze
		{
			get
			{
				return this._Freeze;
			}
			set
			{
				if ((this._Freeze != value))
				{
					this.OnFreezeChanging(value);
					this.SendPropertyChanging();
					this._Freeze = value;
					this.SendPropertyChanged("Freeze");
					this.OnFreezeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SportId", DbType="Int NOT NULL")]
		public int SportId
		{
			get
			{
				return this._SportId;
			}
			set
			{
				if ((this._SportId != value))
				{
					if (this._Sport.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSportIdChanging(value);
					this.SendPropertyChanging();
					this._SportId = value;
					this.SendPropertyChanged("SportId");
					this.OnSportIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Freeze2", DbType="Int NOT NULL")]
		public int Freeze2
		{
			get
			{
				return this._Freeze2;
			}
			set
			{
				if ((this._Freeze2 != value))
				{
					this.OnFreeze2Changing(value);
					this.SendPropertyChanging();
					this._Freeze2 = value;
					this.SendPropertyChanged("Freeze2");
					this.OnFreeze2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Freeze3", DbType="Int NOT NULL")]
		public int Freeze3
		{
			get
			{
				return this._Freeze3;
			}
			set
			{
				if ((this._Freeze3 != value))
				{
					this.OnFreeze3Changing(value);
					this.SendPropertyChanging();
					this._Freeze3 = value;
					this.SendPropertyChanged("Freeze3");
					this.OnFreeze3Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Freeze6", DbType="Int NOT NULL")]
		public int Freeze6
		{
			get
			{
				return this._Freeze6;
			}
			set
			{
				if ((this._Freeze6 != value))
				{
					this.OnFreeze6Changing(value);
					this.SendPropertyChanging();
					this._Freeze6 = value;
					this.SendPropertyChanged("Freeze6");
					this.OnFreeze6Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Freeze9", DbType="Int NOT NULL")]
		public int Freeze9
		{
			get
			{
				return this._Freeze9;
			}
			set
			{
				if ((this._Freeze9 != value))
				{
					this.OnFreeze9Changing(value);
					this.SendPropertyChanging();
					this._Freeze9 = value;
					this.SendPropertyChanged("Freeze9");
					this.OnFreeze9Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Freeze12", DbType="Int NOT NULL")]
		public int Freeze12
		{
			get
			{
				return this._Freeze12;
			}
			set
			{
				if ((this._Freeze12 != value))
				{
					this.OnFreeze12Changing(value);
					this.SendPropertyChanging();
					this._Freeze12 = value;
					this.SendPropertyChanged("Freeze12");
					this.OnFreeze12Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_CourseFacility", Storage="_CourseFacilities", ThisKey="Id", OtherKey="CourseId")]
		public EntitySet<CourseFacility> CourseFacilities
		{
			get
			{
				return this._CourseFacilities;
			}
			set
			{
				this._CourseFacilities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_EnrollCourse", Storage="_EnrollCourses", ThisKey="Id", OtherKey="CourseId")]
		public EntitySet<EnrollCourse> EnrollCourses
		{
			get
			{
				return this._EnrollCourses;
			}
			set
			{
				this._EnrollCourses.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Sport_Course", Storage="_Sport", ThisKey="SportId", OtherKey="Id", IsForeignKey=true)]
		public Sport Sport
		{
			get
			{
				return this._Sport.Entity;
			}
			set
			{
				Sport previousValue = this._Sport.Entity;
				if (((previousValue != value) 
							|| (this._Sport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sport.Entity = null;
						previousValue.Courses.Remove(this);
					}
					this._Sport.Entity = value;
					if ((value != null))
					{
						value.Courses.Add(this);
						this._SportId = value.Id;
					}
					else
					{
						this._SportId = default(int);
					}
					this.SendPropertyChanged("Sport");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CourseFacilities(CourseFacility entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_CourseFacilities(CourseFacility entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
		
		private void attach_EnrollCourses(EnrollCourse entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_EnrollCourses(EnrollCourse entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Trades")]
	public partial class Trade : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _GoodId;
		
		private int _Count;
		
		private int _Price;
		
		private bool _IsSold;
		
		private System.Nullable<int> _MemberId;
		
		private System.DateTime _Time;
		
		private EntityRef<Good> _Good;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnGoodIdChanging(int value);
    partial void OnGoodIdChanged();
    partial void OnCountChanging(int value);
    partial void OnCountChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    partial void OnIsSoldChanging(bool value);
    partial void OnIsSoldChanged();
    partial void OnMemberIdChanging(System.Nullable<int> value);
    partial void OnMemberIdChanged();
    partial void OnTimeChanging(System.DateTime value);
    partial void OnTimeChanged();
    #endregion
		
		public Trade()
		{
			this._Good = default(EntityRef<Good>);
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GoodId", DbType="Int NOT NULL")]
		public int GoodId
		{
			get
			{
				return this._GoodId;
			}
			set
			{
				if ((this._GoodId != value))
				{
					if (this._Good.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGoodIdChanging(value);
					this.SendPropertyChanging();
					this._GoodId = value;
					this.SendPropertyChanged("GoodId");
					this.OnGoodIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Count", DbType="Int NOT NULL")]
		public int Count
		{
			get
			{
				return this._Count;
			}
			set
			{
				if ((this._Count != value))
				{
					this.OnCountChanging(value);
					this.SendPropertyChanging();
					this._Count = value;
					this.SendPropertyChanged("Count");
					this.OnCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSold", DbType="Bit NOT NULL")]
		public bool IsSold
		{
			get
			{
				return this._IsSold;
			}
			set
			{
				if ((this._IsSold != value))
				{
					this.OnIsSoldChanging(value);
					this.SendPropertyChanging();
					this._IsSold = value;
					this.SendPropertyChanged("IsSold");
					this.OnIsSoldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MemberId", DbType="Int")]
		public System.Nullable<int> MemberId
		{
			get
			{
				return this._MemberId;
			}
			set
			{
				if ((this._MemberId != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemberIdChanging(value);
					this.SendPropertyChanging();
					this._MemberId = value;
					this.SendPropertyChanged("MemberId");
					this.OnMemberIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="DateTime NOT NULL")]
		public System.DateTime Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Good_Trade", Storage="_Good", ThisKey="GoodId", OtherKey="Id", IsForeignKey=true)]
		public Good Good
		{
			get
			{
				return this._Good.Entity;
			}
			set
			{
				Good previousValue = this._Good.Entity;
				if (((previousValue != value) 
							|| (this._Good.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Good.Entity = null;
						previousValue.Trades.Remove(this);
					}
					this._Good.Entity = value;
					if ((value != null))
					{
						value.Trades.Add(this);
						this._GoodId = value.Id;
					}
					else
					{
						this._GoodId = default(int);
					}
					this.SendPropertyChanged("Good");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Trade", Storage="_Member", ThisKey="MemberId", OtherKey="Id", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.Trades.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.Trades.Add(this);
						this._MemberId = value.Id;
					}
					else
					{
						this._MemberId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Username;
		
		private string _Password;
		
		private int _RoleId;
		
		private EntitySet<Transaction> _Transactions;
		
		private EntitySet<Member> _Members;
		
		private EntitySet<Enroll> _Enrolls;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnRoleIdChanging(int value);
    partial void OnRoleIdChanged();
    #endregion
		
		public User()
		{
			this._Transactions = new EntitySet<Transaction>(new Action<Transaction>(this.attach_Transactions), new Action<Transaction>(this.detach_Transactions));
			this._Members = new EntitySet<Member>(new Action<Member>(this.attach_Members), new Action<Member>(this.detach_Members));
			this._Enrolls = new EntitySet<Enroll>(new Action<Enroll>(this.attach_Enrolls), new Action<Enroll>(this.detach_Enrolls));
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="Int NOT NULL")]
		public int RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Transaction", Storage="_Transactions", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<Transaction> Transactions
		{
			get
			{
				return this._Transactions;
			}
			set
			{
				this._Transactions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Member", Storage="_Members", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<Member> Members
		{
			get
			{
				return this._Members;
			}
			set
			{
				this._Members.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_Enroll", Storage="_Enrolls", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<Enroll> Enrolls
		{
			get
			{
				return this._Enrolls;
			}
			set
			{
				this._Enrolls.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Role", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Transactions(Transaction entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Members(Member entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_Enrolls(Enroll entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_Enrolls(Enroll entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Access;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAccessChanging(string value);
    partial void OnAccessChanged();
    #endregion
		
		public Role()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Access", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Access
		{
			get
			{
				return this._Access;
			}
			set
			{
				if ((this._Access != value))
				{
					this.OnAccessChanging(value);
					this.SendPropertyChanging();
					this._Access = value;
					this.SendPropertyChanged("Access");
					this.OnAccessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Users", ThisKey="Id", OtherKey="RoleId")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
}
#pragma warning restore 1591
